Name :- PRASAD SATPUTE
Group :- D4
Sub-Group :- C

Note: To solve below queries use “sales” database
*Use Group by clause with appropriate sql functions to solve following queries.


1. Write a query on the Customers table that will find the highest rating in each city. Put the output in this form: For the city (city), the highest rating is: (rating).
    -> select city, max(rating) from customers group by city;
    +----------+-------------+
    | city     | max(rating) |
    +----------+-------------+
    | London   |         100 |
    | Rome     |         200 |
    | San Jose |         300 |
    | Berlin   |         300 |
    +----------+-------------+


2. Write a query that totals the orders for each day and places the results in descending order.
    -> select count(odate) from orders group by odate order by odate;
    +--------------+
    | count(odate) |
    +--------------+
    |            5 |
    |            5 |
    +--------------+


3. Write a query that selects the total amount in orders for each salesperson for whom this total is greater than the amount of the largest order in the table.
    -> select snum, sum(amt) as total_amt from orders group by snum having total_amt > max(amt);
    +------+-----------+
    | snum | total_amt |
    +------+-----------+
    | 1007 |   1116.85 |
    | 1001 |  15382.07 |
    | 1002 |   5546.15 |
    +------+-----------+


4. Write a query that selects the highest rating in each city.
    ->select max(rating) from customers group by city;
    +-------------+
    | max(rating) |
    +-------------+
    |         100 |
    |         200 |
    |         300 |
    |         300 |
    +-------------+


5. Largest order taken by each salesperson with order value more than Rs.3000.
    -> select count(snum), snum from orders where amt > 3000 group by snum;
    +-------------+------+
    | count(snum) | snum |
    +-------------+------+
    |           1 | 1002 |
    |           2 | 1001 |
    +-------------+------+


Note: To solve below queries use “hr” database
* Use Group by clause with appropriate sql functions to solve following queries.


6. Display manager ID and number of employees managed by the manager.
    -> select MANAGER_ID, count(MANAGER_ID) as `no. of employees` from employees group by MANAGER_ID;
    +------------+------------------+
    | MANAGER_ID | no. of employees |
    +------------+------------------+
    |          0 |                1 |
    |        100 |               14 |
    |        101 |                5 |
    |        102 |                1 |
    |        103 |                4 |
    |        108 |                5 |
    |        114 |                5 |
    |        120 |                8 |
    |        121 |                8 |
    |        122 |                8 |
    |        123 |                8 |
    |        124 |                8 |
    |        145 |                6 |
    |        146 |                6 |
    |        147 |                6 |
    |        148 |                6 |
    |        149 |                6 |
    |        201 |                1 |
    |        205 |                1 |
    +------------+------------------+


7. Display the country ID and number of cities we have in the country.
    -> select COUNTRY_ID, count(COUNTRY_ID) as `no. of city` from locations group by COUNTRY_ID;
    +------------+-------------+
    | COUNTRY_ID | no. of city |
    +------------+-------------+
    | "          |           1 |
    | AU         |           1 |
    | BR         |           1 |
    | CA         |           2 |
    | CH         |           2 |
    | CN         |           1 |
    | DE         |           1 |
    | IN         |           1 |
    | IT         |           2 |
    | JP         |           2 |
    | NL         |           1 |
    | Ox         |           1 |
    | SG         |           1 |
    | UK         |           2 |
    | US         |           4 |
    +------------+-------------+


8. Display average salary of employees in each department who have commission percentage.
    -> select DEPARTMENT_ID, avg(SALARY) from employees where COMMISSION_PCT is not null group by DEPARTMENT_ID;
    +---------------+--------------+
    | DEPARTMENT_ID | avg(SALARY)  |
    +---------------+--------------+
    |             0 |  7000.000000 |
    |            10 |  4400.000000 |
    |            20 |  9500.000000 |
    |            30 |  4150.000000 |
    |            40 |  6500.000000 |
    |            50 |  3475.555556 |
    |            60 |  5760.000000 |
    |            70 | 10000.000000 |
    |            80 |  8955.882353 |
    |            90 | 19333.333333 |
    |           100 |  8600.000000 |
    |           110 | 10150.000000 |
    +---------------+--------------+


9. Display job ID, number of employees, sum of salary, and difference between highest salary and lowest salary of the employees of the job.
    => select JOB_ID, count(DEPARTMENT_ID) as `no. of employees`, sum(SALARY), max(SALARY) - min(SALARY) from employees group by JOB_ID;
    +------------+------------------+-------------+---------------------------+
    | JOB_ID     | no. of employees | sum(SALARY) | max(SALARY) - min(SALARY) |
    +------------+------------------+-------------+---------------------------+
    | AC_ACCOUNT |                1 |     8300.00 |                      0.00 |
    | AC_MGR     |                1 |    12000.00 |                      0.00 |
    | AD_ASST    |                1 |     4400.00 |                      0.00 |
    | AD_PRES    |                1 |    24000.00 |                      0.00 |
    | AD_VP      |                2 |    34000.00 |                      0.00 |
    | FI_ACCOUNT |                5 |    39600.00 |                   2100.00 |
    | FI_MGR     |                1 |    12000.00 |                      0.00 |
    | HR_REP     |                1 |     6500.00 |                      0.00 |
    | IT_PROG    |                5 |    28800.00 |                   4800.00 |
    | MK_MAN     |                1 |    13000.00 |                      0.00 |
    | MK_REP     |                1 |     6000.00 |                      0.00 |
    | PR_REP     |                1 |    10000.00 |                      0.00 |
    | PU_CLERK   |                5 |    13900.00 |                    600.00 |
    | PU_MAN     |                1 |    11000.00 |                      0.00 |
    | SA_MAN     |                5 |    61000.00 |                   3500.00 |
    | SA_REP     |               30 |   250500.00 |                   5400.00 |
    | SH_CLERK   |               20 |    64300.00 |                   1700.00 |
    | ST_CLERK   |               20 |    55700.00 |                   1500.00 |
    | ST_MAN     |                5 |    36400.00 |                   2400.00 |
    +------------+------------------+-------------+---------------------------+


10. Display job ID for jobs with average salary more than 10000.
    -> select JOB_ID, avg(SALARY) as avg_salary from employees group by JOB_ID having avg(salary) > 10000;
    +---------+--------------+
    | JOB_ID  | avg_salary   |
    +---------+--------------+
    | AC_MGR  | 12000.000000 |
    | AD_PRES | 24000.000000 |
    | AD_VP   | 17000.000000 |
    | FI_MGR  | 12000.000000 |
    | MK_MAN  | 13000.000000 |
    | PU_MAN  | 11000.000000 |
    | SA_MAN  | 12200.000000 |
    +---------+--------------+


11. Display years in which more than 10 employees joined.
    -> select year(HIRE_DATE) from employees group by year(HIRE_DATE) having count(year(HIRE_DATE)) > 10;
    +-----------------+
    | year(HIRE_DATE) |
    +-----------------+
    |            1987 |
    +-----------------+


12. Display departments in which more than five employees have commission percentage.
    -> select DEPARTMENT_ID, count(DEPARTMENT_ID) as `no. of employees` from employees where COMMISSION_PCT != 0 group by DEPARTMENT_ID having count(DEPARTMENT_ID) > 5;
    +---------------+------------------+
    | DEPARTMENT_ID | no. of employees |
    +---------------+------------------+
    |            80 |               34 |
    +---------------+------------------+


13. Display employee ID for employees who did more than one job in the past.
    ->select EMPLOYEE_ID from job_history group by EMPLOYEE_ID having count(EMPLOYEE_ID) > 1;
    +-------------+
    | EMPLOYEE_ID |
    +-------------+
    |         101 |
    |         176 |
    |         200 |
    +-------------+


14. Display job ID of jobs that were done by more than 3 employees for more than 100 days.
    -> select JOB_ID from job_history where END_DATE - START_DATE > 100 group by JOB_ID having count(JOB_ID) > 3;
    Empty set (0.00 sec)


15. Display department ID, year, and Number of employees joined.
    -> select DEPARTMENT_ID, date_format(HIRE_DATE, '%y'), count(EMPLOYEE_ID) as `no. of employees` from employees group by DEPARTMENT_ID, date_format(HIRE_DATE, '%y') order by DEPARTMENT_ID;
    +---------------+------------------------------+------------------+
    | DEPARTMENT_ID | date_format(HIRE_DATE, '%y') | no. of employees |
    +---------------+------------------------------+------------------+
    |             0 | 87                           |                1 |
    |            10 | 87                           |                1 |
    |            20 | 87                           |                2 |
    |            30 | 87                           |                6 |
    |            40 | 87                           |                1 |
    |            50 | 87                           |               45 |
    |            60 | 87                           |                5 |
    |            70 | 87                           |                1 |
    |            80 | 87                           |               34 |
    |            90 | 87                           |                3 |
    |           100 | 87                           |                6 |
    |           110 | 87                           |                2 |
    +---------------+------------------------------+------------------+


16. Display how many employees joined in each month of the current year.
    -> select date_format(HIRE_DATE, '%m') as month, count(EMPLOYEE_ID) as `no. of employees` from employees group by date_format(HIRE_DATE, '%m');
    +-------+------------------+
    | month | no. of employees |
    +-------+------------------+
    | 06    |               14 |
    | 07    |               31 |
    | 08    |               31 |
    | 09    |               30 |
    | 10    |                1 |
    +-------+------------------+


17. Display details of departments in which the maximum salary is more than 10000.